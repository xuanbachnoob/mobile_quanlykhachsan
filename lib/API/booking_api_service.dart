import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/api_config.dart';
import '../models/datphong.dart';
import '../models/chitietdatphong.dart';
import '../models/sudungdv.dart';

/// Service x·ª≠ l√Ω Booking API
class BookingApiService {
  /// 1. T·∫°o ƒë·∫∑t ph√≤ng
  Future<Datphong> createDatphong(Datphong datphong) async {
    final url = Uri.parse('${ApiConfig.baseUrl}/Datphongs');

    print('üì§ Creating Datphong...');
    print('Request: ${json.encode(datphong.toJson())}');

    try {
      final response = await http.post(
        url,
        headers: ApiConfig.headers,
        body: json.encode(datphong.toJson()),
      ).timeout(ApiConfig.connectionTimeout);

      print('üì° Response: ${response.statusCode}');
      print('üì¶ Body: ${response.body}');

      if (response.statusCode == 201 || response.statusCode == 200) {
        return Datphong.fromJson(json.decode(response.body));
      } else {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o ƒë·∫∑t ph√≤ng. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error creating Datphong: $e');
      throw Exception('L·ªói k·∫øt n·ªëi: $e');
    }
  }

  /// 2. T·∫°o chi ti·∫øt ƒë·∫∑t ph√≤ng
  Future<void> createChitietdatphong(Chitietdatphong chitiet) async {
    final url = Uri.parse('${ApiConfig.baseUrl}/Chitietdatphongs');

    print('üì§ Creating Chitietdatphong...');
    print('Request: ${json.encode(chitiet.toJson())}');

    try {
      final response = await http.post(
        url,
        headers: ApiConfig.headers,
        body: json.encode(chitiet.toJson()),
      ).timeout(ApiConfig.connectionTimeout);

      print('üì° Response: ${response.statusCode}');

      if (response.statusCode != 201 && response.statusCode != 200) {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o chi ti·∫øt ƒë·∫∑t ph√≤ng. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error creating Chitietdatphong: $e');
      throw Exception('L·ªói k·∫øt n·ªëi: $e');
    }
  }

  /// 3. T·∫°o s·ª≠ d·ª•ng d·ªãch v·ª• (Stored Procedure t·ª± t√≠nh to√°n)
  Future<void> createSudungdv(Sudungdv sudungdv) async {
    final url = Uri.parse('${ApiConfig.baseUrl}/Sudungdvs/sudungdv');

    print('üì§ Creating Sudungdv...');
    
    // ‚úÖ CH·ªà G·ª¨I 3 FIELDS: madatphong, madv, soluong
    final requestBody = {
      'madatphong': sudungdv.madatphong,
      'madv': sudungdv.madv,
      'soluong': sudungdv.soluong,
    };
    
    print('Request: ${json.encode(requestBody)}');

    try {
      final response = await http.post(
        url,
        headers: ApiConfig.headers,
        body: json.encode(requestBody),
      ).timeout(ApiConfig.connectionTimeout);

      print('üì° Response: ${response.statusCode}');
      print('üì¶ Body: ${response.body}');

      if (response.statusCode != 200) {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o s·ª≠ d·ª•ng d·ªãch v·ª•. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error creating Sudungdv: $e');
      throw Exception('L·ªói k·∫øt n·ªëi: $e');
    }
  }

  /// 4. T·∫°o h√≥a ƒë∆°n (Stored Procedure)
  Future<void> createHoadon() async {
    final url = Uri.parse('${ApiConfig.baseUrl}/Hoadons/taohoadon');

    print('üì§ Creating Hoadon...');

    try {
      final response = await http.post(
        url,
        headers: ApiConfig.headers,
      ).timeout(ApiConfig.connectionTimeout);

      print('üì° Response: ${response.statusCode}');
      print('üì¶ Body: ${response.body}');

      if (response.statusCode != 200) {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error creating Hoadon: $e');
      throw Exception('L·ªói k·∫øt n·ªëi: $e');
    }
  }

  /// 5. FULL FLOW: T·∫°o booking ho√†n ch·ªânh
  Future<int> createFullBooking({
    required Datphong datphong,
    required List<int> roomIds, // List maphong
    required List<Map<String, int>> services, // List {madv, soluong}
  }) async {
    try {
      print('üöÄ ===== STARTING FULL BOOKING FLOW =====');

      // ===== STEP 1: T·∫†O ƒê·∫∂T PH√íNG =====
      print('\nüìù STEP 1: Creating Datphong...');
      final createdDatphong = await createDatphong(datphong);
      final madatphong = createdDatphong.madatphong!;
      print('‚úÖ Created Datphong with ID: $madatphong');

      // ===== STEP 2: T·∫†O CHI TI·∫æT ƒê·∫∂T PH√íNG =====
      print('\nüè® STEP 2: Creating Chitietdatphong for ${roomIds.length} room(s)...');
      for (int i = 0; i < roomIds.length; i++) {
        final maphong = roomIds[i];
        print('  Creating ${i + 1}/${roomIds.length}: Room ID $maphong');
        
        await createChitietdatphong(
          Chitietdatphong(
            madatphong: madatphong,
            maphong: maphong,
          ),
        );
        
        print('  ‚úÖ Created Chitietdatphong for room $maphong');
      }
      print('‚úÖ All Chitietdatphong created successfully!');

      // ===== STEP 3: T·∫†O S·ª¨ D·ª§NG D·ªäCH V·ª§ =====
      if (services.isNotEmpty) {
        print('\nüéÅ STEP 3: Creating Sudungdv for ${services.length} service(s)...');
        
        for (int i = 0; i < services.length; i++) {
          final service = services[i];
          final madv = service['madv']!;
          final soluong = service['soluong']!;
          
          print('  Creating ${i + 1}/${services.length}: Service ID $madv (Qty: $soluong)');
          
          await createSudungdv(
            Sudungdv(
              madatphong: madatphong,
              madv: madv,
              soluong: soluong,
            ),
          );
          
          print('  ‚úÖ Created Sudungdv for service $madv');
        }
        
        print('‚úÖ All Sudungdv created successfully!');
      } else {
        print('\n‚è≠Ô∏è  STEP 3: No services selected, skipping...');
      }

      // ===== STEP 4: T·∫†O H√ìA ƒê∆†N =====
      print('\nüßæ STEP 4: Creating Hoadon...');
      await createHoadon();
      print('‚úÖ Hoadon created successfully!');

      print('\nüéâ ===== FULL BOOKING FLOW COMPLETED =====');
      print('üìå Madatphong: $madatphong\n');
      
      return madatphong;
      
    } catch (e) {
      print('\n‚ùå ===== BOOKING FLOW FAILED =====');
      print('Error: $e\n');
      rethrow;
    }
  }
}