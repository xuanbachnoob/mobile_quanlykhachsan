import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/api_config.dart';
import '../models/datphong.dart';
import '../models/chitietdatphong.dart';
import '../models/sudungdv.dart';

/// Service x·ª≠ l√Ω Booking API
class BookingApiService {
  /// 1. T·∫°o ƒë·∫∑t ph√≤ng
  Future<Datphong> createDatphong(Datphong datphong) async {
    final url = Uri.parse('${ApiConfig.baseUrl}/Datphongs');
    try {
      final response = await http.post(
        url,
        headers: ApiConfig.headers,
        body: json.encode(datphong.toJson()),
      ).timeout(ApiConfig.connectionTimeout);

      print('üì° Response: ${response.statusCode}');
      print('üì¶ Body: ${response.body}');

      if (response.statusCode == 201 || response.statusCode == 200) {
        return Datphong.fromJson(json.decode(response.body));
      } else {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o ƒë·∫∑t ph√≤ng. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error creating Datphong: $e');
      throw Exception('L·ªói k·∫øt n·ªëi: $e');
    }
  }

  /// 2. T·∫°o chi ti·∫øt ƒë·∫∑t ph√≤ng
  Future<void> createChitietdatphong(Chitietdatphong chitiet) async {
    final url = Uri.parse('${ApiConfig.chitietDatphongEndpoint}/mobile');

    print('üì§ Creating Chitietdatphong...');
    print('Request: ${json.encode(chitiet.toJson())}');

    try {
      final response = await http.post(
        url,
        headers: ApiConfig.headers,
        body: json.encode(chitiet.toJson()),
      ).timeout(ApiConfig.connectionTimeout);

      print('üì° Response: ${response.statusCode}');

      if (response.statusCode != 201 && response.statusCode != 200) {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o chi ti·∫øt ƒë·∫∑t ph√≤ng. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error creating Chitietdatphong: $e');
      throw Exception('L·ªói k·∫øt n·ªëi: $e');
    }
  }

  /// 3. T·∫°o s·ª≠ d·ª•ng d·ªãch v·ª• (Stored Procedure t·ª± t√≠nh to√°n)
  Future<void> createSudungdv(Sudungdv sudungdv) async {
    final url = Uri.parse('${ApiConfig.baseUrl}/Sudungdvs/sudungdv');
    // ‚úÖ CH·ªà G·ª¨I 3 FIELDS: madatphong, madv, soluong
    final requestBody = {
      'madatphong': sudungdv.madatphong,
      'madv': sudungdv.madv,
      'soluong': sudungdv.soluong,
    };
    try {
      final response = await http.post(
        url,
        headers: ApiConfig.headers,
        body: json.encode(requestBody),
      ).timeout(ApiConfig.connectionTimeout);

      if (response.statusCode != 200) {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o s·ª≠ d·ª•ng d·ªãch v·ª•. M√£ l·ªói: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error creating Sudungdv: $e');
      throw Exception('L·ªói k·∫øt n·ªëi: $e');
    }
  }

  /// 4. T·∫°o h√≥a ƒë∆°n (Stored Procedure)
 Future<int> createHoadon() async {
  final url = Uri.parse('${ApiConfig.hoadonEndpoint}/taohoadon');
    final response = await http.post(
      url,
      headers: ApiConfig.headers,
    ).timeout(ApiConfig.connectionTimeout);
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      return data['mahoadon'];
    } else {
      throw Exception('Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n. M√£ l·ªói: ${response.statusCode}');
    }
}

  /// 5. FULL FLOW: T·∫°o booking ho√†n ch·ªânh
  Future<Map<String, int>> createFullBooking({
  required Datphong datphong,
  required List<Map<String, dynamic>> rooms,
  required List<Map<String, int>> services,
}) async {
  try {
    print('üöÄ ===== STARTING FULL BOOKING FLOW =====');

    // STEP 1: T·∫°o ƒë·∫∑t ph√≤ng
    print('\nüìù STEP 1: Creating Datphong...');
    final createdDatphong = await createDatphong(datphong);
    final madatphong = createdDatphong.madatphong!;
    print('‚úÖ Created Datphong with ID: $madatphong');

    // STEP 2: T·∫°o chi ti·∫øt ƒë·∫∑t ph√≤ng

    for (var room in rooms) {
      await createChitietdatphong(
        Chitietdatphong(
          madatphong: madatphong,
          maphong: room['maphong'] as int,
          tongcong: room['tongcong'] as int,
          trangthai: 'ƒê√£ h·ªßy',
        ),
      );
    }

    final mahoadon = await createHoadon();

    // STEP 3: T·∫°o s·ª≠ d·ª•ng d·ªãch v·ª•
    if (services.isNotEmpty) {

      for (var service in services) {
        await createSudungdv(
          Sudungdv(
            madatphong: madatphong,
            madv: service['madv']!,
            soluong: service['soluong']!,
          ),
        );
      }

    }

    return {
      'madatphong': madatphong,
      'mahoadon': mahoadon,
    };
    
  } catch (e) {
    rethrow;
  }
}
}